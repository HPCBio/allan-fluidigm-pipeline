#!/bin/sh
# program:     prepare_fluidigmInput_forV2.sh
# author:      Gloria Rendon
# date:        August, 2016
# description: a program that takes as input files of fluidigm-demultiplexed paired reads generated by pipeline version 2
#              and runs: trim, stitch, fastq_to_fasta to get them ready for vsearch
#########################################################################################

set -x
echo `date`

set +x;
echo -e "\n\n##############################################################################" >&2;
echo -e "\n############   STARTS PREPARE_FLUIDIGMINPUT_FORV2.SH                    #########" >&2;
echo -e "\n##############################################################################\n\n" >&2; 
set -x;

if [ $# != 1 ]
then
     echo -e "\nprogram $0 takes as input files of fluidigm-demultiplexed paired reads generated by pipeline version 2\n"
     echo -e "and spawns qsub jobs that: trim, stitch, fastq_to_fasta those files to get them ready for vsearch\n\n"
     echo -e "Program $0 stopped at line $LINENO\nREASON=Parameters mismatch. \n\n"
     echo -e "Rerun this program like this:\n$0 <configuration file>\n"
     echo -e "Where <configuration file> is a text file with information needed to run this program\n\n";
     exit 1;
fi


runfile=$1

if [ ! -s $runfile ]
then
     echo "$runfile configuration file not found. Exiting now\n\n"
     exit 1;
fi


set +x;
echo -e "\n\n##############################################################################">&2;  
echo -e "\n\n############   PARSING CONFIGURATION FILE AND SANITY CHECK     ###############">&2;
echo -e "\n\n##############################################################################" >&2; 
set -x; 

ampliconfile=$( cat $runfile | grep -w AMPLICONFILE | cut -d '=' -f2 )
samplefile=$( cat $runfile | grep -w SAMPLEFILE | cut -d '=' -f2 )
email=$( cat $runfile | grep -w EMAIL | cut -d '=' -f2 )
rootdir=$( cat $runfile | grep -w PROJECTDIR | cut -d '=' -f2 )
inputdir=$( cat $runfile | grep -w  RAW_READS_DIR | cut -d '=' -f2 )
tmpdir=$( cat $runfile | grep -w TEMPDIR | cut -d '=' -f2 )
outdir=$( cat $runfile | grep -w PREPARED_READS_DIR | cut -d '=' -f2 )
scriptdir=$( cat $runfile | grep -w SCRIPTDIR | cut -d '=' -f2 )
nodes=$( cat $runfile | grep -w NODES | cut -d '=' -f2 )
threads=$( cat $runfile | grep -w THREADS | cut -d '=' -f2 )
queue=$( cat $runfile | grep -w QUEUE | cut -d '=' -f2 )
mem=$( cat $runfile | grep -w MEMORY | cut -d '=' -f2 )
trimMod=$( cat $runfile | grep -w TRIMMOMATICMOD | cut -d '=' -f2 )
fastqcMod=$( cat $runfile | grep -w FASTQCMOD | cut -d '=' -f2 )
pearMod=$( cat $runfile | grep -w PEARMOD | cut -d '=' -f2 )
fastxMod=$( cat $runfile | grep -w FASTXMOD | cut -d '=' -f2 )
adapters=$( cat $runfile | grep -w TRIMMOMATICADAPTERS | cut -d '=' -f2 )
generateAmpliconFile=$( cat $runfile | grep -w GENERATE_AMPLICONFILE | cut -d '=' -f2 | tr '[a-z]' '[A-Z]' )
generateSampleFile=$( cat $runfile | grep -w GENERATE_SAMPLEFILE | cut -d '=' -f2 | tr '[a-z]' '[A-Z]' )
JobSizeLimit=$( cat $runfile | grep -w JOBSIZELIMIT | cut -d '=' -f2 )

#sleep 5

set +x; echo -e "\n\n\n############  checking that project folder exists  \n" >&2; set -x;

if [ ! -d $rootdir ]
then
    echo -e "$0 stopped at line $LINENO\sREASON=$rootdir directory not found"
    exit 1;
fi

set +x; echo -e "\n\n\n############  checking that output folder exists  \n" >&2; set -x;

if [ ! -d $outdir ]
then
    echo -e "creating output folder $outdir";
    `mkdir -p $outdir`
fi

set +x; echo -e "\n\n\n############  checking that tmp folder exists  \n" >&2; set -x;

if [ ! -d $tmpdir ]
then
    echo -e "creating output folder $tmpdir";
    `mkdir $tmpdir`
fi

set +x; echo -e "\n\n\n############  checking that input folder exists  \n" >&2; set -x;

if [ ! -d $inputdir ]
then
    echo -e "$0 stopped at line $LINENO\nREASON=inputdir directory not found. Exiting now."
    exit 1;
fi

set +x; echo -e "\n\n\n############ checking that the file with amplicon names  exists\n" >&2; set -x;

if [ `expr ${#ampliconfile}` -lt 1 ]
then
    echo -e "$0 stopped at line $LINENO\nREASON=file with amplicon names was not specified"
    exit 1;
elif [ ! -s $ampliconfile -a $generateAmpliconFile == "NO" ]
then 
    echo -e "$0 WARNING at line $LINENO\sREASON=$ampliconfile file is empty. We will generate it"
    generateAmpliconFile="YES"
    truncate -s 0 $ampliconfile
elif [ -s $ampliconfile -a $generateAmpliconFile == "YES" ]
then 
    echo -e "$0 WARNING at line $LINENO\sREASON=$ampliconfile file is NOT empty. We will reset it"
    truncate -s 0 $ampliconfile
fi

set +x; echo -e "\n\n\n############  checking that the file with sample names  exists\n" >&2; set -x;

if [ `expr ${#samplefile}` -lt 1 ]
then
    echo -e "$0 stopped at line $LINENO\nREASON=file with sample names was not specified"
    exit 1;
elif [ ! -s $samplefile -a $generateSampleFile == "NO" ]
then 
    echo -e "$0 WARNING at line $LINENO\sREASON=$samplefile file is empty. We will generate it"
    generateSampleFile="YES"
    truncate -s 0 $samplefile
elif [ -s $samplefile -a $generateSampleFile == "YES" ]
then 
    echo -e "$0 WARNING at line $LINENO\sREASON=$samplefile file is NOT empty. We will reset it"
    truncate -s 0 $samplefile
fi


set +x; echo -e "\n\n\n############  checking the value for jobsizelimit\n" >&2; set -x;

if [ `expr ${#JobSizeLimit}` -lt 1 ]
then
    echo -e "$0 WARNING at line $LINENO\nREASON= no value set for JOBSIZELIMIT. Set default value."
    JobSizeLimit=25
fi


set +x;
echo -e "\n##############################################################################"  
echo -e "\n############   PREP WORK. Define more variables and reset files ##############"
echo -e "\n##############################################################################"  
set -x;

numsamples=0                                # to count the number of unique samples processed
numamplicons=0                              # to count the number of unique amplicons processed
numfilesread=0                              # to count the number of files read
numfilesprocessed=0                         # to count the number of files processed
JobCounter=1                                # to count the number of jobs generated
skipped=$outdir/input_files_with_no_reads   # to count the number of files no processed
emptyOut=$outdir/output_files_with_no_reads # to count the number of empty files
truncate -s 0 $skipped
truncate -s 0 $emptyOut
JobFile=$tmpdir/JobFile.prepareReads.$JobCounter  # the file with commands to process files
truncate -s 0 $JobFile

set +x;
echo -e "\n\n##############################################################################">&2;  
echo -e "\n\n############   ANALYSIS BLOCK STARTS HERE                      ###############">&2;
echo -e "\n\n##############################################################################" >&2; 
set -x; 


set +x;
echo -e "\n\n##############################################################################">&2;  
echo -e "\n\n############   START LOOP1 OVER AMPLICONS                      ###############">&2;
echo -e "\n\n##############################################################################" >&2; 
set -x; 

cd $inputdir


for ampliconFolder in `ls -d */`
do

	set +x;
	echo -e "\n\n##############################################################################" >&2;   
	echo -e "\n\n############   PROCESSING AMPLICON = $ampliconFolder                 #########" >&2; 
	echo -e "\n\n##############################################################################" >&2; 
	set -x; 

	cd $inputdir/$ampliconFolder

	amplicon=$( echo $ampliconFolder | sed 's/\///' )
	
	emptyAmplicon="NO"                                  # flag for validating ampliconfile
	
	set +x;
	echo -e "\n##############################################################################" 
	echo -e "\n############ now checking that amplicon exists in amplicon file    ###########" 
	echo -e "\n##############################################################################" >&2; set -x;

	if [ $generateAmpliconFile == "YES" ]
	then

		set +x; echo -e "\n\n\n############  Generating amplicon file. make sure not to include duplicates  \n\n\n" >&2; set -x;
		
		verifyAmplicon=$( cat $ampliconfile | grep "$amplicon" )        
		if [ "$verifyAmplicon" != "$amplicon" ]
		then
			echo -e "$0 warning at line $LINENO\nREASON=amplicon is not found in amplicon file. adding it"
			echo $amplicon >> $ampliconfile
		
		fi
	else

		set +x; echo -e "\n\n\n############  amplicon file exists. This amplicon will be processed ONLY if it is included in amplicon file  \n\n\n" >&2; set -x;
		
		verifyAmplicon=$( cat $ampliconfile | grep "$amplicon" )        
		if [ "$verifyAmplicon" != "$amplicon" ]
		then
			echo -e "$0 warning at line $LINENO\nREASON=$amplicon is not found in $ampliconfile. skipping it"
			emptyAmplicon="YES"
		fi
	
	fi


	set +x; echo -e "\n\n\n############  checking if we need to skip this amplicon  \n\n\n" >&2; set -x;

	if [ $emptyAmplicon == "YES" ]
	then

		set +x; echo -e "\n\n\n############  SKIPPING this amplicon $amplicon because it was not in ampliconfile $ampliconfile  \n\n\n" >&2; set -x;
	
		continue
	fi

	(( numamplicons++ ))
	
	set +x;
	echo -e "\n\n##############################################################################" >&2;   
	echo -e "\n\n############   START LOOP2 OVER READS                              #########" >&2; 
	echo -e "\n\n##############################################################################" >&2; 
	set -x; 


	for  sampledetail in `ls *R1.fastq`
	do
		set +x;
		echo -e "\n##############################################################################"  
		echo -e "\n############ parsing filename: $sampledetail                   ###############"
		echo -e "\n##############################################################################"  
		set -x;
		
		demultiplexed=$( echo $sampledetail | sed "s/_[ACGT]*_R1.fastq//" )   # amplicon and sample
		amplicon=$( echo $demultiplexed | cut -d '-' -f1 )                    # just the amplicon       
		sample=$( echo $demultiplexed | cut -d '-' -f2 )                      # just the sample          
		readprefix=$( echo $sampledetail | sed "s/_R1.fastq//" )              # everything except R1.fastq
		R1=$inputdir/$amplicon/$sampledetail                                  # read1
		R2=$inputdir/$amplicon/${readprefix}_R2.fastq                         # read2
		outputdir=$outdir/$amplicon/$demultiplexed                            # outputdir	
		outputfile=${demultiplexed}_SearchReady.fasta                         # outputfile
		emptyRead="NO"                                                        # flag for validating reads
		emptySample="NO"                                                      # flag for validating samplefile

		(( numfilesread++ ))

		#sleep 5
		
		set +x;
		echo -e "\n##############################################################################" 
		echo -e "\n############ line parsed. now validating info                 ###############" 
		echo -e "\n##############################################################################" >&2; 
		set -x;

		if [ `expr ${#amplicon}` -lt 1 ]
		then
			echo -e "$0 WARNING at line $LINENO\nREASON=empty string for ampliclon"
			emptyAmplicon="YES";
		fi

		if [ `expr ${#sample}` -lt 1 ]
		then
			echo -e "$0 WARNING at line $LINENO\nREASON=empty string for sample"
			emptySample="YES";
		fi

		if [ `expr ${#demultiplexed}` -lt 1 ]
		then
			echo -e "$0 WARNING at line $LINENO\nREASON=empty string for sample name"
			emptySample="YES";
		fi

		if [ `expr ${#R1}` -lt 1 ]
		then
			echo -e "$0 WARNING at line $LINENO\nREASON=empty string for R1"
			emptyRead="YES";
		fi    
		if [ `expr ${#R2}` -lt 1 ]
		then
			echo -e "$0 WARNING at line $LINENO\nREASON=empty string for R2"
			emptyRead="YES";
		fi 


		set +x;
		echo -e "\n##############################################################################" 
		echo -e "\n############ now checking that sample exists in sample file        ###########" 
		echo -e "\n##############################################################################" >&2; set -x;

		if [ $generateSampleFile == "YES" ]
		then

			set +x; echo -e "\n\n\n############  Generating sample file. make sure not to include duplicates  \n\n\n" >&2; set -x;

			verifySample=$( cat $samplefile | grep "$sample" )        
			if [ "$verifySample" != "$sample" ]
			then
				echo -e "$0 warning at line $LINENO\nREASON=sample is not found in sample file. adding it"
				echo $sample >> $samplefile
				
				(( numsamples++ ))
			fi
			
			
	
		else

			set +x; echo -e "\n\n\n############  sample file exists. This sample will be processed ONLY if it is included in sample file  \n\n\n" >&2; set -x;


			verifySample=$( cat $samplefile | grep "$sample" )        
			if [ "$verifySample" != "$sample" ]
			then
				echo -e "SKIPPING this sample $sample because it was not found in samplefile $samplefile"
				emptySample="YES"
			
			fi

		fi

		set +x;
		echo -e "\n##############################################################################" 
		echo -e "\n############ now checking that read files exists               ###############" 
		echo -e "\n##############################################################################" >&2; set -x;

		if [ ! -s $R1 ]
		then
		    echo -e "empty file read1 $R1"
		    emptyRead="YES";
		fi

		if [ ! -s $R2 ]
		then
		    echo -e "empty file read2 $R2"
		    emptyRead="YES";
		fi

		set +x;
		echo -e "\n##############################################################################" 
		echo -e "\n############ This sample will be skipped if any validation failed" 
		echo -e "\n##############################################################################" >&2; set -x;


		if [ $emptyRead != "NO" -a $emptyAmplicon != "NO" -a $emptySample != "NO" ]
		then
			set +x;
			echo -e "\n##############################################################################" 
			echo -e "\n############ Skipping this sample   $sampledetails             ###############"
			echo -e "\n##############################################################################" >&2; set -x;             

			echo -e "$R1\t$R2\n" >> $skipped

		else
			set +x;
			echo -e "\n##############################################################################" 
			echo -e "\n############ info validated. proceed with analysis             ###############"    
			echo -e "\n##############################################################################" >&2; set -x; 


			(( numfilesprocessed++ ))


			set +x;
			echo -e "\n##############################################################################" 
			echo -e "\n############ now checking that the file limit has not been rached #############" 
			echo -e "\n##############################################################################" >&2; set -x;

			if [ $numfilesprocessed -gt $JobSizeLimit ]
			then

				set +x; echo -e "\n\n\n############ file limit has been reached. Sechedule this jobfile \n" >&2; set -x;

				qsub1=$tmpdir/qsub.prepareReads.$JobCounter
				echo "#PBS -S /bin/bash" > $qsub1
				echo "#PBS -N prepareReads_$JobCounter" >> $qsub1
				echo "#PBS -M $email" >> $qsub1
				echo "#PBS -m ae" >> $qsub1
				echo "#PBS -e $tmpdir/qsub.prepareReads_$JobCounter.er" >> $qsub1
				echo "#PBS -o $tmpdir/qsub.prepareReads_$JobCounter.ou" >> $qsub1
				echo "#PBS -l nodes=$nodes:ppn=$threads" >> $qsub1
				echo "#PBS -q $queue" >> $qsub1
				echo "#PBS -l nodes=$nodes:ppn=$threads" >> $qsub1
				echo "echo begin execution at \`date\`" >> $qsub1			
				cat $JobFile >> $qsub1
				echo "echo end   execution at \`date\`" >> $qsub1
				`chmod g+r $qsub1 `
				jobid=`qsub $qsub1`
				echo `date`

				set +x; echo -e "\n\n\n############ file limit has been reached. initialize next jobfile   \n" >&2; set -x;
				numfilesprocessed=1		
				(( JobCounter++ ))		
				JobFile=$tmpdir/JobFile.prepareReads.$JobCounter
				truncate -s 0 $JobFile

				echo "$scriptdir/process_one_fluidigm.sh $demultiplexed $R1 $R2 $outputfile $emptyOut $outputdir $runfile" >> $JobFile

			else

				set +x; echo -e "\n\n\n############ file limit has not been reached. Add command to jobfile   \n" >&2; set -x;

				echo "$scriptdir/process_one_fluidigm.sh $demultiplexed $R1 $R2 $outputfile $emptyOut $outputdir $runfile" >> $JobFile

			fi ## end if job limit	    

		fi  # end if validation checks

		set +x; echo -e "\n\n\n############ Done with this file $sampledetail Next one please   \n\n\n" >&2; set -x;

	done  ## end loop2 over reads

	set +x; echo -e "\n\n\n############ Done with this amplicon $amplicon Next one please   \n\n\n" >&2; set -x;
	
done ## end loop1 over amplicons

set +x;
echo -e "\n\n##############################################################################" >&2;  
echo -e "\n\n############   END LOOP1 OVER AMPLICONS                      ###############" >&2;
echo -e "\n\n##############################################################################" >&2; 
set -x; 

set +x;
echo -e "\n\n##############################################################################" >&2;  
echo -e "\n\n############   schedule the last qsub                          ###############" >&2;
echo -e "\n\n##############################################################################" >&2; 
set -x; 


qsub1=$tmpdir/qsub.prepareReads.$JobCounter
echo "#PBS -S /bin/bash" > $qsub1
echo "#PBS -N prepareReads_$JobCounter" >> $qsub1
echo "#PBS -M $email" >> $qsub1
echo "#PBS -m ae" >> $qsub1
echo "#PBS -e $tmpdir/qsub.prepareReads_$JobCounter.er" >> $qsub1
echo "#PBS -o $tmpdir/qsub.prepareReads_$JobCounter.ou" >> $qsub1
echo "#PBS -l nodes=$nodes:ppn=$threads" >> $qsub1
echo "#PBS -q $queue" >> $qsub1
echo "#PBS -l nodes=$nodes:ppn=$threads" >> $qsub1

#dependency line is added only if this is not the only job

if  [ $JobCounter -gt 1 ]
then
	echo "#PBS -W depend=afterok:$jobid" >> $qsub1
fi

echo "echo begin execution at \`date\`" >> $qsub1			
cat $JobFile >> $qsub1
echo "echo end   execution at \`date\`" >> $qsub1
`chmod g+r $qsub1 `
jobid=`qsub $qsub1`
echo `date`


set +x;
echo -e "\n##############################################################################" >&2;    
echo -e "\n############   analysis ends  here.                                  #########" >&2;
echo -e "\n############   $numfilesread total files read                        #########" >&2;
echo -e "\n############   $numsamples total samples processed                   #########" >&2;
echo -e "\n############   $numamplicons total amplicons processed               #########" >&2;
echo -e "\n############   $JobCounter total qsub jobs submitted                 #########" >&2;
echo -e "\n############   $JobSizeLimit files processed per qsub job            #########" >&2;
echo -e "\n##############################################################################" >&2;
echo -e "\n##############################################################################" >&2;

echo -e "\n\n##############################################################################" >&2;
echo -e "\n############   ENDS PREPARE_FLUIDIGMINPUT_FORV2.SH                        #########" >&2;
echo -e "\n##############################################################################\n\n" >&2; 
set -x;
